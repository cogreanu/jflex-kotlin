  /** Input device. */
  private lateinit var zzReader: java.io.Reader

  /** Current state of the DFA. */
  private var zzState: Int = 0

  /** Current lexical state. */
  private var zzLexicalState: Int = YYINITIAL

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private var zzBuffer: CharArray = CharArray(Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen()))

  /** Text position at the last accepting state. */
  private var zzMarkedPos: Int = 0;

  /** Current text position in the buffer. */
  private var zzCurrentPos: Int = 0;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private var zzStartRead: Int = 0;

  /** Marks the last character in the buffer, that has been read from input. */
  private var zzEndRead: Int = 0;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private var zzAtEOF: Boolean = false;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private var zzFinalHighSurrogate: Int = 0;

--- user class code L4

--- constructor declaration L5

    /**
     * Refills the input buffer.
     *
     * @return {@code false} iff there was new input.
     * @exception java.io.IOException  if any I/O-Error occurs
     */
    @Throws(java.io.IOException::class)
    private fun zzRefill(): Boolean {

        /* first: make room (if you can) */
        if (zzStartRead > 0) {
            zzEndRead += zzFinalHighSurrogate;
            zzFinalHighSurrogate = 0;
            System.arraycopy(
                zzBuffer, zzStartRead,
                zzBuffer, 0,
                zzEndRead - zzStartRead
            );

            /* translate stored positions */
            zzEndRead -= zzStartRead;
            zzCurrentPos -= zzStartRead;
            zzMarkedPos -= zzStartRead;
            zzStartRead = 0;
        }

        /* is the buffer big enough? */
        if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
            /* if not, and it can grow: blow it up */
            val newBuffer: CharArray = CharArray(Math.min(zzBuffer.length * 2, zzMaxBufferLen()));
            System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
            zzBuffer = newBuffer;
            zzEndRead += zzFinalHighSurrogate;
            zzFinalHighSurrogate = 0;
        }

        /* fill the buffer with new input */
        val requested: Int = zzBuffer.length - zzEndRead;
        val numRead: Int = zzReader.read(zzBuffer, zzEndRead, requested);

        /* not supposed to occur according to specification of java.io.Reader */
        if (numRead == 0) {
            if (requested == 0) {
                throw java.io.EOFException("Scan buffer limit reached [" + zzBuffer.length + "]");
            } else {
                throw java.io.IOException(
                    "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround."
                );
            }
        }
        if (numRead > 0) {
            zzEndRead += numRead;
            if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
                if (numRead == requested) { // We requested too few chars to encode a full Unicode character
                    --zzEndRead;
                    zzFinalHighSurrogate = 1;
                } else {                    // There is room in the buffer for at least one more char
                    val c: Int = zzReader.read();  // Expecting to read a paired low surrogate char
                    if (c == -1) {
                        return true;
                    } else {
                        zzBuffer[zzEndRead++] = (Char) c;
                    }
                }
            }
            /* potentially more input available */
            return false;
        }

        /* numRead < 0 ==> end of stream */
        return true;
    }


    /**
     * Closes the input reader.
     *
     * @throws java.io.IOException if the reader could not be closed.
     */
    @Throws(java.io.IOException::class)
    fun yyclose() {
        zzAtEOF = true; // indicate end of file
        zzEndRead = zzStartRead; // invalidate buffer

        if (zzReader != null) {
            zzReader.close();
        }
    }


    /**
     * Resets the scanner to read from a new input stream.
     *
     * <p>Does not close the old reader.
     *
     * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
     * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
     *
     * <p>Internal scan buffer is resized down to its initial length, if it has grown.
     *
     * @param reader The new input stream.
     */
    fun yyreset(reader: java.io.Reader) {
        zzReader = reader;
        zzEOFDone = false;
        yyResetPosition();
        zzLexicalState = YYINITIAL;
        val initBufferSize: Int = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
        if (zzBuffer.length > initBufferSize) {
            zzBuffer = CharArray(initBufferSize);
        }
    }

    /**
     * Resets the input position.
     */
    private fun yyResetPosition() {
        zzAtBOL = true;
        zzAtEOF = false;
        zzCurrentPos = 0;
        zzMarkedPos = 0;
        zzStartRead = 0;
        zzEndRead = 0;
        zzFinalHighSurrogate = 0;
        yyline = 0;
        yycolumn = 0;
        yychar = 0L;
    }


    /**
     * Returns whether the scanner has reached the end of the reader it reads from.
     *
     * @return whether the scanner has reached EOF.
     */
    fun yyatEOF(): Boolean {
        return zzAtEOF;
    }


    /**
     * Returns the current lexical state.
     *
     * @return the current lexical state.
     */
    fun yystate(): Int {
        return zzLexicalState;
    }


    /**
     * Enters a new lexical state.
     *
     * @param newState the new lexical state
     */
    fun yybegin(newState: Int) {
        zzLexicalState = newState;
    }


    /**
     * Returns the text matched by the current regular expression.
     *
     * @return the matched text.
     */
    fun yytext(): String {
        return String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);
    }


    /**
     * Returns the character at the given position from the matched text.
     *
     * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
     *
     * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
     *
     * @return the character at {@code position}.
     */
    fun yycharat(position: Int): Char {
        return zzBuffer[zzStartRead + position];
    }


    /**
     * How many characters were matched.
     *
     * @return the length of the matched text region.
     */
    fun yylength(): Int {
        return zzMarkedPos - zzStartRead;
    }


    /**
     * Reports an error that occurred while scanning.
     *
     * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
     * match-all fallback rule) this method will only be called with things that
     * "Can't Possibly Happen".
     *
     * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
     * scanner etc.).
     *
     * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
     *
     * @param errorCode the code of the error message to display.
     */

--- zzScanError declaration L6


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
--- yypushback decl (contains zzScanError exception) L8
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


--- zzDoEOF L9


  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
--- yylex declaration L10
    val zzInput: Int = 0;
    val zzAction: Int = 0;

    // cached fields:
    val zzCurrentPosL: Int = 0;
    val zzMarkedPosL: Int = 0;
    val zzEndReadL: Int = zzEndRead;
    val zzBufferL: CharArray = zzBuffer;

--- local declarations L11

    while (true) {
      zzMarkedPosL = zzMarkedPos;

--- start admin (line, char, col count) L12
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

--- start admin (lexstate etc) L13

      run zzForAction@{
        while (true) {

--- next input, line, col, char count, next transition, isFinal action L14
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
--- line count update L15
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;
--- char count update L16

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
--- eofvalue L17
      }
      else {
--- actions L18
          else ->
--- no match L19
        }
      }
    }
  }

--- main L20

companion object {
  /** This character denotes the end of file. */
  val YYEOF: Int = -1;

  /** Initial size of the lookahead buffer. */
--- private static final int ZZ_BUFFERSIZE = ...; L1

  // Lexical states.
---  lexical states, charmap L2

  /** error code for "unknown internal scanner error". */
  private val zz_unknown_error: Int = 0;
  /** error code for "could not match input". */
  private val zz_no_match: Int = 1;
  /** error code for "pushback value was too large". */
  private val zz_pushback_2big: Int = 2;

  /**
   * error messages for {@link #zz_unknown_error}, {@link #zz_no_match}, and
   * {@link #zz_pushback_2big} respectively.
   */
  val zz_error_msg = arrayOf(
    "unknown internal scanner error",
    "error: could not match input",
    "error: pushback value was too large"
  );

--- isFinal list L3
    val message: String = try {
        ZZ_ERROR_MSG[errorCode];
    } catch (e: ArrayIndexOutOfBoundsException ) {
        ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

--- throws clause L7
}
}
